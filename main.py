import streamlit as st
from pymongo import MongoClient
from datetime import datetime

# Acessando os segredos corretamente
db_username = st.secrets["database"]["DB_USERNAME"]
db_token = st.secrets["database"]["DB_TOKEN"]
allowed_users = st.secrets["users"]["ALLOWED_USERS"]

# Conectar ao MongoDB com as credenciais
uri = f"mongodb+srv://{db_username}:{db_token}@cluster0.sowongv.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
client = MongoClient(uri)
db = client["pockemon"]
collection = db["pockemontcg"]

# Fun√ß√£o para validar as posi√ß√µes
def validar_posicoes(posicoes):
    if len(set(posicoes.values())) != len(posicoes.values()):
        return False, "As posi√ß√µes n√£o podem se repetir."
    if not all(1 <= pos <= 5 for pos in posicoes.values()):
        return False, "Todas as posi√ß√µes devem ser n√∫meros entre 1 e 5."
    return True, ""

# Cabe√ßalho do app
st.title("üÉè Pockemon Estampas Ilustradas Pocket - Registro de Posi√ß√µes")

# Input para identifica√ß√£o do usu√°rio
identificacao = st.text_input("üë§ Identifica√ß√£o (Nome)")

if identificacao:
    if identificacao in allowed_users:
        st.success(f"‚úÖ Bem-vindo, {identificacao}!")

        # Input da posi√ß√£o desejada inicialmente e final
        posicao_inicial_desejada = st.number_input("üî¢ Posi√ß√£o Inicial da Carta Desejada (1 a 5)", min_value=1, max_value=5, step=1)
        posicao_final_desejada = st.number_input("üéØ Posi√ß√£o Final da Carta Desejada (1 a 5)", min_value=1, max_value=5, step=1)

        # Checkbox para indicar se a carta desejada era EX
        carta_ex = st.checkbox("‚ú® A carta desejada era EX?")

        # Campo para o lugar selecionado pelo usu√°rio
        lugar_selecionado = st.number_input("üìç Lugar Selecionado", min_value=1, max_value=5, step=1)

        # Dividir as posi√ß√µes em linhas usando colunas com emojis
        with st.container():
            col1, col2, col3 = st.columns(3)
            posicoes = {
                "Posi√ß√£o 1": col1.number_input("üìç Posi√ß√£o 1", min_value=1, max_value=5, step=1),
                "Posi√ß√£o 2": col2.number_input("üìç Posi√ß√£o 2", min_value=1, max_value=5, step=1),
                "Posi√ß√£o 3": col3.number_input("üìç Posi√ß√£o 3", min_value=1, max_value=5, step=1)
            }

            col4, col5 = st.columns(2)
            posicoes["Posi√ß√£o 4"] = col4.number_input("üìç Posi√ß√£o 4", min_value=1, max_value=5, step=1)
            posicoes["Posi√ß√£o 5"] = col5.number_input("üìç Posi√ß√£o 5", min_value=1, max_value=5, step=1)

        # Bot√£o para inserir dados com emoji
        if st.button("üì• Inserir"):
            # Validar posi√ß√µes usando a fun√ß√£o
            valido, mensagem = validar_posicoes(posicoes)
            if not valido:
                st.error(mensagem)
            else:
                # Simplificando a l√≥gica para calcular "Acertou"
                acertou_carta = posicao_final_desejada == lugar_selecionado

                # Adiciona o timestamp atual
                timestamp_atual = datetime.now().isoformat()

                dados = {
                    "Posicao inicial da carta desejada": posicao_inicial_desejada,
                    "Posicao final da carta desejada": posicao_final_desejada,
                    "Carta era EX": carta_ex,
                    "Lugar selecionado": lugar_selecionado,
                    "Acertou": acertou_carta,
                    "Posicao 1": posicoes["Posi√ß√£o 1"],
                    "Posicao 2": posicoes["Posi√ß√£o 2"],
                    "Posicao 3": posicoes["Posi√ß√£o 3"],
                    "Posicao 4": posicoes["Posi√ß√£o 4"],
                    "Posicao 5": posicoes["Posi√ß√£o 5"],
                    "Identifica√ß√£o": identificacao,
                    "DataHoraRegistro": timestamp_atual
                }

                # Inserir dados no MongoDB
                collection.insert_one(dados)
                st.success("üéâ Dados inseridos com sucesso!")

                # Exibir resultado ap√≥s a l√≥gica
                if acertou_carta:
                    st.success("üéØ Voc√™ acertou a posi√ß√£o da carta!")
                else:
                    st.warning("‚ùå Voc√™ errou a posi√ß√£o da carta.")
    else:
        st.error("üö´ Usu√°rio n√£o autorizado!")
else:
    st.info("‚ÑπÔ∏è Por favor, insira seu nome para continuar.")